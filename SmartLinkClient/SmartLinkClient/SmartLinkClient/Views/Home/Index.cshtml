﻿@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>URL Summarizer</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/Login.js?v=1"></script>
    <script src="~/js/Authenticate.js?v=1"></script>
    <script src="~/js/Register.js?v=1"></script>
    <link rel="stylesheet" href="~/css/index.css?v=1" />
</head>

<body>
    <div class="main-container">
        <partial name="_NavbarPartial"></partial>
        <!-- Login Modal -->
        <div id="login-modal" class="modal fade" tabindex="-1">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Login</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <form>
                               <div class="mb-3">
                                <label for="email" class="col-form-label">Email</label>
                                <input type="email" class="form-control" id="email" autocomplete="email">
                            </div>
                            <div class="mb-3">
                                <label for="password" class="col-form-label">Password</label>
                                <input type="password" class="form-control" id="password"
                                       autocomplete="current-password">
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button id="modalLoginBtn" type="button" class="btn btn-primary">Login</button>
                       
                    </div>
                </div>
            </div>
        </div>
        <!-- Register Modal -->
        <div id="register-modal" class="modal fade" tabindex="-1">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Register</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <form>
                            <div class="mb-3">
                                <label for="email" class="col-form-label">Email</label>
                                <input type="email" class="form-control" id="register-email" autocomplete="email">
                            </div>
                            <div class="mb-3">
                                <label for="username" class="col-form-label">Username</label>
                                <input type="text" class="form-control" id="register-username" autocomplete="username">
                            </div>
                            <div class="mb-3">
                                <label for="password" class="col-form-label">Password</label>
                                <input type="password" class="form-control" id="register-password"
                                       autocomplete="current-password">
                            </div>
                            <div class="mb-3">
                                <label for="password" class="col-form-label">Repeat Password</label>
                                <input type="password" class="form-control" id="password-repeat"
                                       autocomplete="current-password">
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button id="modalRegisterBtn" type="button" class="btn btn-primary">Register</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <span id="loader" class="loader"></span>
    <div id=loader-overlay class="loader-overlay"></div>
    <div class="input-section">
        <input id="url-input" type="text" class="input-field" placeholder="Enter URL here" required>
        <button id="urlSubmitBtn" class="submit-button" type="button">Submit</button>
    </div>

<div id="summary" class="summary-container">
    <!-- Summary content will appear here -->
</div>
<p>Last 5 queries</p>
<ul id ="list-item" class="list-group"></ul>
    <partial name="~/Views/Shared/_ToastPartial.cshtml" />
    <footer class="footer">
        <a target="_blank "href="https://www.github.com/enisertdev"><div class="footer-content">© Enisertdev </div></a>
    </footer>
    <script>
        let urlSubmit = document.getElementById("urlSubmitBtn");
        let summaryContainer = document.getElementById("summary");
        let blurEffect = document.getElementById("loader-overlay");
        let loader = document.getElementById("loader");
        let loginBtn = document.getElementById("loginBtn");
        let logoutBtn = document.getElementById("logoutBtn");
        let loginModal = new bootstrap.Modal(document.getElementById("login-modal"));
        let loginBtnModal = document.getElementById("modalLoginBtn");
        const toastEl = document.getElementById("liveToast");
        const toast = new bootstrap.Toast(toastEl);
        const summariesBtn = document.getElementById("mySummariesBtn");
        const registerBtn = document.getElementById("registerBtn");
        const registerModal = new bootstrap.Modal(document.getElementById("register-modal"));
        const registerModalBtn = document.getElementById("modalRegisterBtn");
        const linkList = document.getElementById("list-item");

        const loginManager = new LoginManager(loginBtn, logoutBtn, loginModal, loginBtnModal,);
        loginManager.init();

        const authManager = new AuthenticateManager();
        authManager.init();

        const registerManager = new RegisterManager(registerBtn, registerModal, registerModalBtn);
        registerManager.init();

        window.addEventListener("DOMContentLoaded", async () => {
            const token = localStorage.getItem("jwt");
            const email = localStorage.getItem("email");
            if (!email || !token) {
                toggleLoginStyles(false);
                return;
            }
            last5Queries();
            try {
                const isValid = await authManager.isValidJwt();
                toggleLoginStyles(isValid);
            }
            catch (error) {
                console.error("JWT doğrulama hatası:", error);
                showToast("ERROR", "Sunucu hatası.");
            }
        });


        urlSubmit.addEventListener("click", () => {
            let url = document.getElementById("url-input").value;
            if (url.trim() == "") {
                showToast("ERROR", "URL is required.");
                return;
            }
            if (!checkValidUrl(url)) {
                showToast("ERROR", "URL is invalid.");
                return;
            }
            getSummary(url);
        });

        summariesBtn.addEventListener("click", () => {
            window.location.href = "/Summary/MySummaries";
        });

        function showToast(messageType, message) {
            const toastMessage = document.getElementById("toast-message");
            const msgType = document.getElementById("message-type");
            toastMessage.textContent = message;
            msgType.textContent = messageType;
            toastEl.classList.remove("success-toast", "error-toast", "warning-toast");
            if (messageType === "SUCCESS") {
                toastEl.classList.add("success-toast");
            } else if (messageType === "ERROR") {
                toastEl.classList.add("error-toast");
            } else if (messageType === "WARNING") {
                toastEl.classList.add("warning-toast");
            }
            toast.show();
            setTimeout(() => {
                toast.hide();
            }, 10000);
        }

        function checkValidUrl(url) {
            try {
                new URL(url);
                return true;
            } catch (e) {
                return false;
            }
        }

        function toggleLoginStyles(isLoginValid) {
            if (isLoginValid) {
                logoutBtn.style.display = "block";
                loginBtn.style.display = "none";
                summariesBtn.style.display = "block";
                registerBtn.style.display = "none";

            }
            else {
                logoutBtn.style.display = "none";
                loginBtn.style.display = "block";
                summariesBtn.style.display = "none";
                registerBtn.style.display = "block";

            }
        }


        function activateLoader() {
            blurEffect.style.display = "block";
            loader.style.display = "block";
        }
        function deactivateLoader() {
            blurEffect.style.display = "none";
            loader.style.display = "none";
        }

        async function getSummary(url) {
            activateLoader();
            try {
                const response = await fetch("https://smartlinkapi.imaginewebsite.com.tr/api/link", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        "Authorization": `Bearer ${localStorage.getItem("jwt")}`
                    },
                    body: JSON.stringify({ url: url }),
                });
                if (response.status == 401 || response.status == 403) {
                    showToast("ERROR", "Invalid token,please login.");
                    return;
                }
                if (!response.ok) {
                    throw new Error(`Response Status: ${response.status}`);
                }
                const json = await response.json();
                summaryContainer.innerText = json.summary;
            }
            catch (error) {
                console.log(error.message);
            }
            finally {
                deactivateLoader();
            }
        }

        async function last5Queries(){
            const response = await fetch("https://smartlinkapi.imaginewebsite.com.tr/api/link/last5");
            const json = await response.json();
            if(!response.ok)
            {
                console.log(json.status);
            }
            json.title.forEach(link =>{
                let li = document.createElement("li");
                li.classList.add("list-group-item");
                li.textContent = link.title;
                linkList.appendChild(li);
                li.style.cursor = "pointer";
                li.addEventListener("click", () => {
                    const baseUrl = `@Url.Action("Index","Summary")`;
                    window.location.href = `${baseUrl}?id=${link.id}`;
                })
            });

        }

    </script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>

</body>

</html>